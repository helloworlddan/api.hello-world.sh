{"version":3,"sources":["firebase.js","components/SignIn.jsx","components/SignUp.jsx","providers/UserProvider.jsx","components/Dashboard.jsx","components/PasswordReset.jsx","components/Application.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","googleProvider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","SignIn","useState","error","className","onClick","to","SignUp","console","UserContext","createContext","user","UserProvider","state","componentDidMount","onAuthStateChanged","userAuth","setState","Provider","value","this","props","children","Component","Dashboard","useContext","photoURL","displayName","email","uid","_lat","log","style","background","backgroundSize","height","width","signOut","tableLayout","border","wordBreak","PasswordReset","setEmail","emailHasBeenSent","setEmailHasBeenSent","setError","action","htmlFor","type","name","id","placeholder","onChange","event","currentTarget","preventDefault","sendPasswordResetEmail","then","setTimeout","catch","sendResetEmail","Application","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d1ee086.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCvf5TQolHXBDGF_28tNEgZATn0LvHi6bQ\",\n  authDomain: \"hwsh-api.firebaseapp.com\",\n  projectId: \"hwsh-api\",\n  storageBucket: \"hwsh-api.appspot.com\",\n  messagingSenderId: \"546978254761\",\n  appId: \"1:546978254761:web:37eda206bbe04ad2d77eb8\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\n\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(googleProvider);\n};\n","import React, {useState} from \"react\";\nimport { Link } from \"@reach/router\";\nimport { signInWithGoogle,signInWithGithub } from \"../firebase\";\nimport { auth } from \"../firebase\";\n\nconst SignIn = () => {\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState(null);\n\n    const signInWithEmailAndPasswordHandler = (event,email, password) => {\n        event.preventDefault();\n        auth.signInWithEmailAndPassword(email, password).catch(error => {\n        setError(\"Error signing in with password and email!\");\n          console.error(\"Error signing in with password and email\", error);\n        });\n      };\n      \n      const onChangeHandler = (event) => {\n          const {name, value} = event.currentTarget;\n        \n          if(name === 'userEmail') {\n              setEmail(value);\n          }\n          else if(name === 'userPassword'){\n            setPassword(value);\n          }\n      };\n   \n\n  return (\n    <div className=\"mt-8\">\n      <h1 className=\"text-3xl mb-2 text-center font-bold\">Sign In</h1>\n      <div className=\"border border-blue-400 mx-auto w-11/12 md:w-2/4 rounded py-8 px-4 md:px-8\">\n        {error !== null && <div className = \"py-4 bg-red-600 w-full text-white text-center mb-3\">{error}</div>}\n        <p className=\"text-center my-3\">or</p>\n        <button\n          className=\"bg-red-500 hover:bg-red-600 w-full py-2 text-white\"\n          onClick={() => {\n            signInWithGoogle();\n          }}\n        >\n          Sign in with Google\n        </button>\n        <p className=\"text-center my-3\">\n          Don't have an account?{\" \"}\n          <Link to=\"signUp\" className=\"text-blue-500 hover:text-blue-600\">\n            Sign up here\n          </Link>{\" \"}\n          <br />{\" \"}\n          <Link to=\"passwordReset\" className=\"text-blue-500 hover:text-blue-600\">\n            Forgot Password?\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;","import React, { useState } from \"react\";\nimport { Link } from \"@reach/router\";\nimport { auth, signInWithGoogle } from \"../firebase\";\n\nconst SignUp = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [displayName, setDisplayName] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  const createUserWithEmailAndPasswordHandler = async (event, email, password) => {\n    event.preventDefault();\n    try{\n      await auth.createUserWithEmailAndPassword(email, password);\n    }\n    catch(error){\n      setError('Error Signing up with email and password');\n    }\n      \n    setEmail(\"\");\n    setPassword(\"\");\n    setDisplayName(\"\");\n  };\n\n  const onChangeHandler = event => {\n    const { name, value } = event.currentTarget;\n\n    if (name === \"userEmail\") {\n      setEmail(value);\n    } else if (name === \"userPassword\") {\n      setPassword(value);\n    } else if (name === \"displayName\") {\n      setDisplayName(value);\n    }\n  };\n\n  return (\n    <div className=\"mt-8\">\n      <h1 className=\"text-3xl mb-2 text-center font-bold\">Sign Up</h1>\n      <div className=\"border border-blue-400 mx-auto w-11/12 md:w-2/4 rounded py-8 px-4 md:px-8\">\n        {error !== null && (\n          <div className=\"py-4 bg-red-600 w-full text-white text-center mb-3\">\n            {error}\n          </div>\n        )}\n        <p className=\"text-center my-3\">or</p>\n        <button\n          onClick={() => {\n            try {\n              signInWithGoogle();\n            } catch (error) {\n              console.error(\"Error signing in with Google\", error);\n            }\n          }}\n          className=\"bg-red-500 hover:bg-red-600 w-full py-2 text-white\"\n        >\n          Sign In with Google\n        </button>\n        <p className=\"text-center my-3\">\n          Already have an account?{\" \"}\n          <Link to=\"/\" className=\"text-blue-500 hover:text-blue-600\">\n            Sign in here\n          </Link>{\" \"}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import React, { Component, createContext } from \"react\";\nimport { auth } from \"../firebase\";\n\nexport const UserContext = createContext({ user: null });\nclass UserProvider extends Component {\n  state = {\n    user: null\n  };\n\n  componentDidMount = () => {\n    auth.onAuthStateChanged(userAuth => {\n      this.setState({ user: userAuth});\n    });\n  };\n  render() {\n    return (\n      <UserContext.Provider value={this.state.user}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\nexport default UserProvider;\n","import React, { useContext } from \"react\";\nimport { UserContext } from \"../providers/UserProvider\";\nimport { navigate } from \"@reach/router\";\nimport {auth} from \"../firebase\";\nconst Dashboard = () => {\n  const user = useContext(UserContext);\n  const {photoURL, displayName, email, uid, _lat} = user;\n  console.log(user);\n  \n\n  return (\n    <div className = \"mx-auto w-11/12 md:w-2/4 py-8 px-4 md:px-8\">\n      <div className=\"flex border flex-col items-center md:flex-row md:items-start border-blue-400 px-3 py-4\">\n        <div\n          style={{\n            background: `url(${photoURL || 'https://res.cloudinary.com/dqcsk8rsc/image/upload/v1577268053/avatar-1-bitmoji_upgwhc.png'})  no-repeat center center`,\n            backgroundSize: \"cover\",\n            height: \"200px\",\n            width: \"200px\"\n          }}\n          className=\"border border-blue-300\"\n        ></div>\n        <div className = \"md:pl-4\">\n        <h2 className = \"text-2xl font-semibold\">{displayName}</h2>\n        <h3 className = \"italic\">{email}</h3>\n        </div>\n      </div>\n      <button className = \"w-full py-3 bg-red-600 mt-4 text-white\" onClick = {() => {auth.signOut()}}>Sign out</button>\n      <div className = \"md:pl-4\">Debug Info</div>\n      <div>\n        <table style={{\n            tableLayout: \"fixed\"\n            }}>\n        <tbody style={{\n            border: \"1px solid black\"\n            }}>\n          <tr style={{\n            border: \"1px solid black\"\n            }}>\n            <td><code>{uid}</code></td>\n          </tr >\n          <tr style={{\n            border: \"1px solid black\"\n            }}>\n            <td style={{\n            wordBreak: \"break-all\"\n            }}><code>{_lat}</code></td>\n          </tr>\n        </tbody>\n        </table>\n      </div>\n    </div>\n  ) \n};\n\nexport default Dashboard;","import React, { useState } from \"react\";\nimport { auth } from \"../firebase\";\nimport { Link } from \"@reach/router\";\n\nconst PasswordReset = () => {\n  const [email, setEmail] = useState(\"\");\n  const [emailHasBeenSent, setEmailHasBeenSent] = useState(false);\n  const [error, setError] = useState(null);\n\n  const onChangeHandler = event => {\n    const { name, value } = event.currentTarget;\n\n    if (name === \"userEmail\") {\n      setEmail(value);\n    }\n  };\n\n  const sendResetEmail = event => {\n    event.preventDefault();\n    auth\n      .sendPasswordResetEmail(email)\n      .then(() => {\n          setEmailHasBeenSent(true);\n        setTimeout(() => {setEmailHasBeenSent(false)}, 3000);\n      })\n      .catch(() => {\n        setError(\"Error resetting password\");\n      });\n  };\n  return (\n    <div className=\"mt-8\">\n      <h1 className=\"text-xl text-center font-bold mb-3\">\n        Reset your Password\n      </h1>\n      <div className=\"border border-blue-300 mx-auto w-11/12 md:w-2/4 rounded py-8 px-4 md:px-8\">\n        <form action=\"\">\n          {emailHasBeenSent && (\n            <div className=\"py-3 bg-green-400 w-full text-white text-center mb-3\">\n              An email has been sent to you!\n            </div>\n          )}\n          {error !== null && (\n            <div className=\"py-3 bg-red-600 w-full text-white text-center mb-3\">\n              {error}\n            </div>\n          )}\n          <label htmlFor=\"userEmail\" className=\"w-full block\">\n            Email:\n          </label>\n          <input\n            type=\"email\"\n            name=\"userEmail\"\n            id=\"userEmail\"\n            value={email}\n            placeholder=\"Input your email\"\n            onChange={onChangeHandler}\n            className=\"mb-3 w-full px-1 py-2\"\n          />\n          <button\n            className=\"w-full bg-blue-400 text-white py-3\"\n            onClick={event => {\n              sendResetEmail(event);\n            }}\n          >\n            Send me a reset link\n          </button>\n        </form>\n\n        <Link\n          to=\"/\"\n          className=\"my-2 text-blue-700 hover:text-blue-800 text-center block\"\n        >\n          &larr; back to sign in page\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordReset;","import React, { useContext } from \"react\";\nimport { Router } from \"@reach/router\";\nimport SignIn from \"./SignIn\";\nimport SignUp from \"./SignUp\";\nimport Dashboard from \"./Dashboard\";\nimport { UserContext } from \"../providers/UserProvider\";\nimport PasswordReset from \"./PasswordReset\";\n\nfunction Application() {\n  const user = useContext(UserContext);\n  return (\n        user ?\n        <Dashboard />\n      :\n        <Router>\n          <SignUp path=\"signUp\" />\n          <SignIn path=\"/\" />\n          <PasswordReset path = \"passwordReset\" />\n        </Router>\n      \n  );\n}\n\nexport default Application;","import React from \"react\";\nimport Application from \"./components/Application\";\nimport UserProvider from \"./providers/UserProvider\";\nfunction App() {\n  \n  return (\n    <UserProvider>\n      <Application />\n    </UserProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}